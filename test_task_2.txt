2. Миграция базы данных
Есть база данных и два типа сервисов А и Б:
•	Сервисы типа А добавляют в базу записи в формате: id, name, status, timestamp.
•	Сервисы типа Б читают эти данные для агрегации и прочих нужд.

В какой-то момент выясняется, что строковые имена в этих записях занимают слишком много памяти, и при этом часто повторяются. Поэтому целесообразно вынести их в отдельную табличку.

В результате данные должны будут добавляться в следующем формате: id, name_id, status, timestamp. Где name_id внешний ключ к новой таблице с полями: id, name.

Задача заключается в том, что бы составить пошаговый план миграции базы и сервисов на новый формат данных, при этом не разломав работоспособность системы.

ВАЖНО:
1. Нельзя остановить и обновить все сервисы разом (т.е. нельзя остановить сразу все сервисы типа А, либо все сервисы типа Б, обновление сервисов происходит по одному за раз).
2. В базе данных атомарно можно делать только следующие запросы:
  - добавить колонку
  - удалить колонку
  - переименовать колонку
_____________________________________________________________________________
Шаги миграции:
0. Сделать полный бекап данных таблицы 1
1. Создать таблицу 2 с ключами id, name
2. Настроить все сервисы типа Б, чтобы получали информацию в следующем виде:
SELECT id, name, status, timestamp
FROM table_1
WHERE name IS NOT Null
UNION
SELECT table_1.id, table_2.name, table_1.status, table_1.timestamp
FROM table_1 JOIN table_2 ON table_1.name_id = table_2.id
WHERE table_1.name IS Null
3. Настроить все сервисы типа А, чтобы брали ID поля NAME в таблице 2 и подставляли его сразу в поле NAME_ID таблицы 1, если его нет, то делали новую запись в поле NAME таблицы 2 и подставляли новый NAME_ID в таблицу 1
4. После этого переносим все данные из столбца NAME таблицы 1 в таблицу 2, а в таблице 1 подставляем их NAME_ID
5. Убеждаемся что в таблице 1 не осталось записей с ненулевым значением столбца NAME, если записи есть, то какой-то сервис продолжает писать данные в старом формате, нужно его вычислить и превести на новый формат работы
6. Далее переводим все сервисы Б на чтение по следующму запросу:
SELECT table_1.id, table_2.name, table_1.status, table_1.timestamp
FROM table_1 JOIN table_2 ON table_1.name_id = table_2.id
7. Все сервисы типа А уже и так пишут инфу в 2 таблицы, для них не нужна перенастройка
8. Повторяем пункт 5
9. Дропаем столбец NAME в таблице 1
